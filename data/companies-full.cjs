/**
 * SEC EDGAR ÂÆåÊï¥ÂÖ¨Âè∏CIKÊò†Â∞ÑË°® - Âü∫‰∫éSECÂÆòÊñπÊï∞ÊçÆ
 * ÂåÖÂê´Ââç1000Â§ßÁæéËÇ°‰∏äÂ∏ÇÂÖ¨Âè∏ÁöÑCIKÂíåÂü∫Êú¨‰ø°ÊÅØ
 * Êï∞ÊçÆÊù•Ê∫êÔºöSEC EDGARÂÆòÊñπÊï∞ÊçÆÂ∫ì (https://www.sec.gov/files/company_tickers.json)
 * ÊÄªÂÖ¨Âè∏Êï∞Ôºö10123ÂÆ∂ÔºåÊú¨Êñá‰ª∂ÂåÖÂê´Ââç1000ÂÆ∂ÈáçË¶ÅÂÖ¨Âè∏
 */

// ÁîüÊàêÂÆåÊï¥ÂÖ¨Âè∏ÂàóË°®ÁöÑÂáΩÊï∞
const generateFullCompanyList = () => {
    const fs = require('fs');
    const path = require('path');

    try {
        // Â∞ùËØïËØªÂèñ‰∏ãËΩΩÁöÑSECÊï∞ÊçÆ
        const filePath = path.join(__dirname, 'company_tickers.json');
        if (fs.existsSync(filePath)) {
            const secData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            const companies = {};

            // ËΩ¨Êç¢Ââç1000ÂÆ∂ÂÖ¨Âè∏Êï∞ÊçÆ
            const companyArray = Object.values(secData).slice(0, 1000);

            companyArray.forEach(company => {
                const ticker = company.ticker;
                const cik = company.cik_str.toString();
                const name = company.title;

                // Ê∑ªÂä†tickerÊù°ÁõÆ
                companies[ticker] = {
                    cik: cik.padStart(6, '0'), // Ê†áÂáÜÂåñCIKÊ†ºÂºè
                    name: name
                };

                // Ê∑ªÂä†ÂÖ¨Âè∏ÂêçÁß∞Áº©ÂÜôÊù°ÁõÆÔºàÂéªÈô§Â∏∏ËßÅÂêéÁºÄÔºâ
                const cleanName = name
                    .replace(/\s+(INC\.?|CORP\.?|CO\.?|LTD\.?|LLC\.?|LP\.?)(\s|$)/gi, '')
                    .replace(/[^\w\s]/g, '')
                    .replace(/\s+/g, '')
                    .toUpperCase();

                if (cleanName && cleanName !== ticker && cleanName.length > 2) {
                    companies[cleanName] = { cik: cik.padStart(6, '0'), name: name };
                }
            });

            return companies;
        }
    } catch (error) {
        console.error('Êó†Ê≥ïËØªÂèñSECÊï∞ÊçÆÊñá‰ª∂:', error.message);
    }

    // Â¶ÇÊûúÊó†Ê≥ïËØªÂèñSECÊï∞ÊçÆÔºåËøîÂõûÂü∫Á°ÄÊï∞ÊçÆÈõÜ
    return require('./companies.cjs').WELL_KNOWN_COMPANIES;
};

// ÁîüÊàêÂÆåÊï¥ÁöÑÂÖ¨Âè∏Êò†Â∞ÑË°®
const FULL_COMPANY_DATABASE = generateFullCompanyList();

/**
 * Ëé∑ÂèñÊîØÊåÅÁöÑÂÖ¨Âè∏ÊÄªÊï∞
 */
const getFullCompanyCount = () => {
    const uniqueCompanies = new Set();
    Object.values(FULL_COMPANY_DATABASE).forEach(company => {
        uniqueCompanies.add(company.cik);
    });
    return uniqueCompanies.size;
};

/**
 * ÊåâÂ∏ÇÂÄº/ÈáçË¶ÅÊÄßÊêúÁ¥¢ÂÖ¨Âè∏
 */
const searchCompaniesByImportance = (query, limit = 10) => {
    const searchTerm = query.toUpperCase();
    const results = [];

    for (const [ticker, company] of Object.entries(FULL_COMPANY_DATABASE)) {
        if (ticker.includes(searchTerm) ||
            company.name.toUpperCase().includes(searchTerm)) {
            results.push({
                ticker: ticker,
                name: company.name,
                cik: company.cik
            });

            if (results.length >= limit) break;
        }
    }

    return results;
};

/**
 * Ëé∑ÂèñË°å‰∏öÂàÜÁ±ªÔºàÂü∫‰∫éÂâç1000Â§ßÂÖ¨Âè∏Ôºâ
 */
const getFullCompaniesByCategory = () => {
    // Âü∫Á°ÄÂàÜÁ±ª‰øùÊåÅ‰∏çÂèòÔºå‰ΩÜÁé∞Âú®ÊîØÊåÅÊõ¥Â§öÂÖ¨Âè∏
    const baseCategories = require('./companies.cjs').getCompaniesByCategory();

    // Ê∑ªÂä†Êñ∞ÁöÑÂàÜÁ±ª
    return {
        ...baseCategories,
        'üåê ÂõΩÈôÖÂÖ¨Âè∏': ['SAP', 'ASML', 'NVO', 'TM', 'AZN', 'HSBC', 'NVS', 'CYATY'],
        'üìà ETFÂü∫Èáë': ['SPY', 'QQQ', 'IVV', 'VOO', 'VTI', 'IEFA', 'EFA'],
        'üö¨ ‰º†ÁªüË°å‰∏ö': ['PM', 'MO', 'BTI', 'JTI'],
        'üèõÔ∏è ÈáëËûçÊúçÂä°Êâ©Â±ï': ['GS', 'MS', 'SCHW', 'BLK', 'ICE', 'CME', 'SPGI', 'MCO'],
        'üîã ÁîµÊ±†‰∏éÂÇ®ËÉΩ': ['CATL', 'BYD', 'LG', 'PANASONIC'],
        'üéØ ‰∏ì‰∏öÊúçÂä°': ['ACN', 'IBM', 'ORCL', 'SAP', 'NOW', 'ADBE']
    };
};

/**
 * Êô∫ËÉΩÊêúÁ¥¢ÂáΩÊï∞
 */
const intelligentSearch = (query, options = {}) => {
    const {
        limit = 20,
        includePartialMatch = true,
        sortByRelevance = true
    } = options;

    const searchTerm = query.toUpperCase().trim();
    const results = [];
    const seen = new Set();

    // 1. Á≤æÁ°ÆÂåπÈÖçticker
    if (FULL_COMPANY_DATABASE[searchTerm]) {
        const company = FULL_COMPANY_DATABASE[searchTerm];
        results.push({
            ticker: searchTerm,
            name: company.name,
            cik: company.cik,
            matchType: 'exact_ticker',
            relevance: 100
        });
        seen.add(company.cik);
    }

    // 2. ÈÉ®ÂàÜÂåπÈÖç
    if (includePartialMatch && results.length < limit) {
        for (const [ticker, company] of Object.entries(FULL_COMPANY_DATABASE)) {
            if (seen.has(company.cik)) continue;

            let relevance = 0;
            let matchType = '';

            // TickerÂºÄÂ§¥ÂåπÈÖç
            if (ticker.startsWith(searchTerm)) {
                relevance = 90;
                matchType = 'ticker_prefix';
            }
            // TickerÂåÖÂê´
            else if (ticker.includes(searchTerm)) {
                relevance = 70;
                matchType = 'ticker_contains';
            }
            // ÂÖ¨Âè∏ÂêçÁß∞ÂºÄÂ§¥ÂåπÈÖç
            else if (company.name.toUpperCase().startsWith(searchTerm)) {
                relevance = 80;
                matchType = 'name_prefix';
            }
            // ÂÖ¨Âè∏ÂêçÁß∞ÂåÖÂê´
            else if (company.name.toUpperCase().includes(searchTerm)) {
                relevance = 60;
                matchType = 'name_contains';
            }

            if (relevance > 0) {
                results.push({
                    ticker: ticker,
                    name: company.name,
                    cik: company.cik,
                    matchType: matchType,
                    relevance: relevance
                });
                seen.add(company.cik);

                if (results.length >= limit) break;
            }
        }
    }

    // 3. ÊåâÁõ∏ÂÖ≥ÊÄßÊéíÂ∫è
    if (sortByRelevance) {
        results.sort((a, b) => b.relevance - a.relevance);
    }

    return results;
};

module.exports = {
    FULL_COMPANY_DATABASE,
    getFullCompanyCount,
    searchCompaniesByImportance,
    getFullCompaniesByCategory,
    intelligentSearch
};